/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.dimension.flare.data.network.misskey.api.model

import kotlinx.serialization.Contextual
import kotlinx.serialization.Required
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * *
 * @param id * @param name * @param username * @param host The local host is represented with `null`.
 * @param avatarUrl * @param avatarBlurhash * @param onlineStatus * @param url * @param uri * @param movedToUri * @param alsoKnownAs * @param createdAt * @param updatedAt * @param lastFetchedAt * @param bannerUrl * @param bannerBlurhash * @param isLocked * @param isSilenced * @param isLimited * @param isSuspended * @param description * @param location * @param birthday * @param lang * @param fields * @param followersCount * @param followingCount * @param notesCount * @param pinnedNoteIds * @param pinnedNotes * @param pinnedPageId * @param pinnedPage * @param publicReactions * @param twoFactorEnabled * @param usePasswordLessLogin * @param securityKeys * @param avatarId * @param bannerId * @param injectFeaturedNote * @param receiveAnnouncementEmail * @param alwaysMarkNsfw * @param autoSensitive * @param carefulBot * @param autoAcceptFollowed * @param noCrawle * @param preventAiLearning * @param isExplorable * @param isDeleted * @param twoFactorBackupCodes * @param hideOnlineStatus * @param hasUnreadSpecifiedNotes * @param hasUnreadMentions * @param hasUnreadAnnouncement * @param hasUnreadAntenna * @param hasUnreadNotification * @param hasPendingReceivedFollowRequest * @param mutedWords * @param mutedInstances * @param mutingNotificationTypes * @param emailNotificationTypes * @param isAdmin * @param isModerator * @param isBot * @param isCat * @param isFollowing * @param isFollowed * @param hasPendingFollowRequestFromYou * @param hasPendingFollowRequestToYou * @param isBlocking * @param isBlocked * @param isMuted * @param isRenoteMuted * @param memo * @param email * @param emailVerified * @param securityKeysList */
@Serializable

data class User(

    @SerialName(value = "id") @Required val id: kotlin.String,

    @SerialName(value = "name") @Required val name: kotlin.String?,

    @SerialName(value = "username") @Required val username: kotlin.String,

    /* The local host is represented with `null`. */
    @SerialName(value = "host") @Required val host: kotlin.String?,

    @SerialName(value = "avatarUrl") @Required val avatarUrl: kotlin.String?,

    @SerialName(value = "avatarBlurhash") @Required val avatarBlurhash: kotlin.String?,

    @SerialName(value = "onlineStatus") @Required val onlineStatus: User.OnlineStatus?,

    @SerialName(value = "url") @Required val url: kotlin.String?,

    @SerialName(value = "uri") @Required val uri: kotlin.String?,

    @SerialName(value = "movedToUri") @Required val movedToUri: kotlin.String?,

    @SerialName(value = "alsoKnownAs") @Required val alsoKnownAs: kotlin.collections.List<kotlin.String>?,

    @SerialName(value = "createdAt") @Required val createdAt: kotlin.String,

    @SerialName(value = "updatedAt") @Required val updatedAt: kotlin.String?,

    @SerialName(value = "lastFetchedAt") @Required val lastFetchedAt: kotlin.String?,

    @SerialName(value = "bannerUrl") @Required val bannerUrl: kotlin.String?,

    @SerialName(value = "bannerBlurhash") @Required val bannerBlurhash: kotlin.String?,

    @SerialName(value = "isLocked") @Required val isLocked: kotlin.Boolean,

    @SerialName(value = "isSilenced") @Required val isSilenced: kotlin.Boolean,

    @SerialName(value = "isLimited") @Required val isLimited: kotlin.Boolean,

    @SerialName(value = "isSuspended") @Required val isSuspended: kotlin.Boolean,

    @SerialName(value = "description") @Required val description: kotlin.String?,

    @SerialName(value = "location") @Required val location: kotlin.String?,

    @SerialName(value = "birthday") @Required val birthday: kotlin.String?,

    @SerialName(value = "lang") @Required val lang: kotlin.String?,

    @SerialName(value = "fields") @Required val fields: kotlin.collections.List<UserDetailedNotMeOnlyFieldsInner>,

    @SerialName(value = "followersCount") @Required val followersCount: kotlin.Double,

    @SerialName(value = "followingCount") @Required val followingCount: kotlin.Double,

    @SerialName(value = "notesCount") @Required val notesCount: kotlin.Double,

    @SerialName(value = "pinnedNoteIds") @Required val pinnedNoteIds: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "pinnedNotes") @Required val pinnedNotes: kotlin.collections.List<@Contextual Note>,

    @SerialName(value = "pinnedPageId") @Required val pinnedPageId: kotlin.String?,

    @SerialName(value = "pinnedPage") @Required val pinnedPage: Page,

    @SerialName(value = "publicReactions") @Required val publicReactions: kotlin.Boolean,

    @SerialName(value = "twoFactorEnabled") @Required val twoFactorEnabled: kotlin.Boolean = false,

    @SerialName(value = "usePasswordLessLogin") @Required val usePasswordLessLogin: kotlin.Boolean = false,

    @SerialName(value = "securityKeys") @Required val securityKeys: kotlin.Boolean = false,

    @SerialName(value = "avatarId") @Required val avatarId: kotlin.String?,

    @SerialName(value = "bannerId") @Required val bannerId: kotlin.String?,

    @SerialName(value = "injectFeaturedNote") @Required val injectFeaturedNote: kotlin.Boolean?,

    @SerialName(value = "receiveAnnouncementEmail") @Required val receiveAnnouncementEmail: kotlin.Boolean?,

    @SerialName(value = "alwaysMarkNsfw") @Required val alwaysMarkNsfw: kotlin.Boolean?,

    @SerialName(value = "autoSensitive") @Required val autoSensitive: kotlin.Boolean?,

    @SerialName(value = "carefulBot") @Required val carefulBot: kotlin.Boolean?,

    @SerialName(value = "autoAcceptFollowed") @Required val autoAcceptFollowed: kotlin.Boolean?,

    @SerialName(value = "noCrawle") @Required val noCrawle: kotlin.Boolean,

    @SerialName(value = "preventAiLearning") @Required val preventAiLearning: kotlin.Boolean,

    @SerialName(value = "isExplorable") @Required val isExplorable: kotlin.Boolean,

    @SerialName(value = "isDeleted") @Required val isDeleted: kotlin.Boolean,

    @SerialName(value = "twoFactorBackupCodes") @Required val twoFactorBackupCodes: User.TwoFactorBackupCodes,

    @SerialName(value = "hideOnlineStatus") @Required val hideOnlineStatus: kotlin.Boolean,

    @SerialName(value = "hasUnreadSpecifiedNotes") @Required val hasUnreadSpecifiedNotes: kotlin.Boolean,

    @SerialName(value = "hasUnreadMentions") @Required val hasUnreadMentions: kotlin.Boolean,

    @SerialName(value = "hasUnreadAnnouncement") @Required val hasUnreadAnnouncement: kotlin.Boolean,

    @SerialName(value = "hasUnreadAntenna") @Required val hasUnreadAntenna: kotlin.Boolean,

    @SerialName(value = "hasUnreadNotification") @Required val hasUnreadNotification: kotlin.Boolean,

    @SerialName(value = "hasPendingReceivedFollowRequest") @Required val hasPendingReceivedFollowRequest: kotlin.Boolean,

    @SerialName(value = "mutedWords") @Required val mutedWords: kotlin.collections.List<kotlin.collections.List<kotlin.String>>,

    @SerialName(value = "mutedInstances") @Required val mutedInstances: kotlin.collections.List<kotlin.String>?,

    @SerialName(value = "mutingNotificationTypes") @Required val mutingNotificationTypes: kotlin.collections.List<kotlin.String>?,

    @SerialName(value = "emailNotificationTypes") @Required val emailNotificationTypes: kotlin.collections.List<kotlin.String>?,

    @SerialName(value = "isAdmin") val isAdmin: kotlin.Boolean? = false,

    @SerialName(value = "isModerator") val isModerator: kotlin.Boolean? = false,

    @SerialName(value = "isBot") val isBot: kotlin.Boolean? = null,

    @SerialName(value = "isCat") val isCat: kotlin.Boolean? = null,

    @SerialName(value = "isFollowing") val isFollowing: kotlin.Boolean? = null,

    @SerialName(value = "isFollowed") val isFollowed: kotlin.Boolean? = null,

    @SerialName(value = "hasPendingFollowRequestFromYou") val hasPendingFollowRequestFromYou: kotlin.Boolean? = null,

    @SerialName(value = "hasPendingFollowRequestToYou") val hasPendingFollowRequestToYou: kotlin.Boolean? = null,

    @SerialName(value = "isBlocking") val isBlocking: kotlin.Boolean? = null,

    @SerialName(value = "isBlocked") val isBlocked: kotlin.Boolean? = null,

    @SerialName(value = "isMuted") val isMuted: kotlin.Boolean? = null,

    @SerialName(value = "isRenoteMuted") val isRenoteMuted: kotlin.Boolean? = null,

    @SerialName(value = "memo") val memo: kotlin.String? = null,

    @SerialName(value = "email") val email: kotlin.String? = null,

    @SerialName(value = "emailVerified") val emailVerified: kotlin.Boolean? = null,

    @SerialName(value = "securityKeysList") val securityKeysList: kotlin.collections.List<kotlin.String>? = null

) {

    /**
     * *
     * Values: Unknown,Online,Active,Offline
     */
    @Serializable
    enum class OnlineStatus(val value: kotlin.String) {
        @SerialName(value = "unknown")
        Unknown("unknown"),

        @SerialName(value = "online")
        Online("online"),

        @SerialName(value = "active")
        Active("active"),

        @SerialName(value = "offline")
        Offline("offline");
    }

    /**
     * *
     * Values: Full,Partial,None
     */
    @Serializable
    enum class TwoFactorBackupCodes(val value: kotlin.String) {
        @SerialName(value = "full")
        Full("full"),

        @SerialName(value = "partial")
        Partial("partial"),

        @SerialName(value = "none")
        None("none");
    }
}
