
import Awesome
import Generated
import JXPhotoBrowser
import Kingfisher
import MarkdownUI
import os.log
import shared
import SwiftDate
import SwiftUI
import UIKit

// MARK: - SwiftÂéüÁîüÁ±ªÂûãÂÆö‰πâ
//enum SwiftAccountType {
//    case specific(accountKey: String)
//    case active
//    case guest
//}
//
//struct SwiftMicroBlogKey {
//    let id: String
//    let host: String
//
//    init(id: String, host: String) {
//        self.id = id
//        self.host = host
//    }
//}

struct TimelineStatusViewV2: View {
    let item: TimelineItem
    let index: Int
    let presenter: TimelinePresenter?
    @Binding var scrollPositionID: String?
    let onError: (FlareError) -> Void

    // Ê∑ªÂä†TimelineStatusViewÈúÄË¶ÅÁöÑÁä∂ÊÄÅÂíåÁéØÂ¢ÉÂèòÈáè
    let isDetail: Bool = false
    let enableTranslation: Bool = true
    @State private var showMedia: Bool = false
    @State private var showShareMenu: Bool = false

    @Environment(\.openURL) private var openURL
    @Environment(\.appSettings) private var appSettings
    @Environment(FlareRouter.self) private var router
    @Environment(FlareTheme.self) private var theme

    // Â™í‰ΩìÁÇπÂáªÂõûË∞É - ‰ΩøÁî®Swift MediaÁ±ªÂûã
    private let onMediaClick: (Int, Media) -> Void = { _, _ in }

    // ÂàõÂª∫‰∏¥Êó∂ÁöÑStatusViewModelÊù•ÂÖºÂÆπÁé∞ÊúâÁªÑ‰ª∂
    private var viewModel: StatusViewModel? {
        // ÊöÇÊó∂ËøîÂõûnilÔºåÂêéÁª≠ÈúÄË¶Å‰ªéTimelineItemËΩ¨Êç¢‰∏∫StatusViewModel
        // ÊàñËÄÖÁõ¥Êé•‰øÆÊîπÁªÑ‰ª∂‰ΩøÁî®TimelineItem
        return nil
    }
    
    var body: some View {
        // üî• Êñ∞Â¢ûÔºöTimelineÁ∫ßÂà´ÊïèÊÑüÂÜÖÂÆπÈöêËóèÊ£ÄÊü•
        if shouldHideInTimeline {
            EmptyView()
        } else {
            timelineContent
        }
    }

    // MARK: - ÊïèÊÑüÂÜÖÂÆπÈöêËóèÈÄªËæë

    /// TimelineÁ∫ßÂà´ÊïèÊÑüÂÜÖÂÆπÈöêËóèÂà§Êñ≠ - ÂØπÂ∫îV1ÁâàÊú¨StatusItemView.shouldHideInTimeline
    private var shouldHideInTimeline: Bool {
        let sensitiveSettings = appSettings.appearanceSettings.sensitiveContentSettings

        // Á¨¨‰∏ÄÊ≠•ÔºöÊ£ÄÊü•ÊòØÂê¶ÂºÄÂêØtimelineÈöêËóèÂäüËÉΩ
        guard sensitiveSettings.hideInTimeline else {
//            FlareLog.debug("TimelineStatusViewV2 SensitiveContent TimelineÈöêËóèÊú™ÂºÄÂêØ - item.id: \(item.id)")
            return false
        }

        // Á¨¨‰∫åÊ≠•ÔºöÊ£ÄÊü•ÂÜÖÂÆπÊòØÂê¶‰∏∫ÊïèÊÑüÂÜÖÂÆπ
        guard item.sensitive else {
//            FlareLog.debug("TimelineStatusViewV2 SensitiveContent ÂÜÖÂÆπÈùûÊïèÊÑü - item.id: \(item.id)")
            return false
        }

        // Á¨¨‰∏âÊ≠•ÔºöÊ†πÊçÆÊó∂Èó¥ËåÉÂõ¥ËÆæÁΩÆÂÜ≥ÂÆöÊòØÂê¶ÈöêËóè
        if let timeRange = sensitiveSettings.timeRange {
            // ÊúâÊó∂Èó¥ËåÉÂõ¥ÔºöÂè™Âú®Êó∂Èó¥ËåÉÂõ¥ÂÜÖÈöêËóè
            let shouldHide = timeRange.isCurrentTimeInRange()
//            FlareLog.debug("TimelineStatusViewV2 SensitiveContent Êó∂Èó¥ËåÉÂõ¥Ê£ÄÊü• - item.id: \(item.id), shouldHide: \(shouldHide)")
            return shouldHide
        } else {
            // Ê≤°ÊúâÊó∂Èó¥ËåÉÂõ¥ÔºöÊÄªÊòØÈöêËóèÊïèÊÑüÂÜÖÂÆπ
//            FlareLog.debug("TimelineStatusViewV2 SensitiveContent ÊÄªÊòØÈöêËóèÊïèÊÑüÂÜÖÂÆπ - item.id: \(item.id)")
            return true
        }
    }


    private var timelineContent: some View {
        // Ê∑ªÂä†ËØ¶ÁªÜÊó•Âøó
//        let _ = FlareLog.debug("TimelineStatusViewV2 Ê∏≤ÊüìTimelineÈ°πÁõÆ")
//        let _ = FlareLog.debug("TimelineStatusViewV2 item.id: \(item.id)")
//        let _ = FlareLog.debug("TimelineStatusViewV2 item.hasImages: \(item.hasImages)")
//        let _ = FlareLog.debug("TimelineStatusViewV2 item.images.count: \(item.images.count)")
//        let _ = FlareLog.debug("TimelineStatusViewV2 item.images: \(item.images)")

        // ‰ΩøÁî®TimelineStatusViewÁöÑÁªìÊûÑ
        return VStack(alignment: .leading) {
            Spacer().frame(height: 2)

            // üî• Êñ∞Â¢ûÔºöËΩ¨ÂèëÂ§¥ÈÉ®ÊòæÁ§∫ - Êù°‰ª∂ÊòæÁ§∫topMessage
            if let topMessage = item.topMessage {
                StatusRetweetHeaderComponentV2(topMessage: topMessage)
                    .environment(router)
                    .padding(.horizontal, 16)
                    .padding(.bottom, 4)
            }

            // ‰ΩøÁî®V2ÁâàÊú¨ÁöÑStatusHeaderView - Áõ¥Êé•‰ΩøÁî®TimelineItem
            StatusHeaderViewV2(
                item: item,
                isDetailView: isDetail
            )

            // ‰ΩøÁî®V2ÁâàÊú¨ÁöÑStatusContentView - Áõ¥Êé•‰ΩøÁî®TimelineItemÔºåÊ∑ªÂä†Â∑¶Âè≥ËæπË∑ù
            StatusContentViewV2(
                item: item,
                isDetailView: isDetail,
                enableTranslation: enableTranslation,
                appSettings: appSettings,
                theme: theme,
                openURL: openURL,
                onMediaClick: { index, media in
                    // TODO: ÈúÄË¶ÅÈÄÇÈÖçSwift MediaÁ±ªÂûãÁöÑÂõûË∞É
                    // onMediaClick(index, media)
                },
                onPodcastCardTap: { card in
                    handlePodcastCardTap(card: card)
                }
            )
            // Ê∑ªÂä†Â∑¶Âè≥16ÁÇπÁöÑËæπË∑ù

            // ‰ΩøÁî®V2ÁâàÊú¨ÁöÑStatusActionsView
//            if let viewModel = viewModel {
//                StatusActionsViewV2(
//                    viewModel: viewModel,
//                    appSettings: appSettings,
//                    openURL: openURL,
//                    parentView: self
//                )
//            } else {
                // ÊöÇÊó∂‰ΩøÁî®Áé∞ÊúâÁöÑV2 Actions (ÂΩìviewModel‰∏∫nilÊó∂)
                TimelineActionsViewV2(
                    item: item,
                    onAction: { actionType, updatedItem in
                        handleTimelineAction(actionType, item: updatedItem, at: index)
                    }
                )
//            }

            // Spacer().frame(height: 3)
        }
         .padding(.horizontal, 16)
        .frame(alignment: .leading)
        .contentShape(Rectangle())
        .onTapGesture {
            handleStatusTap()
        }
        .onAppear {
            // ‰øùÁïôÂéüÊúâÁöÑonAppearÈÄªËæë
            // ËÆæÁΩÆÊªöÂä®‰ΩçÁΩÆID
            if index == 0 {
                scrollPositionID = item.id
            }

            // TODO: È¢ÑÂä†ËΩΩÈÄªËæëÈúÄË¶ÅÈáçÊñ∞ÂÆûÁé∞ÔºåÊöÇÊó∂ÁßªÈô§shared‰æùËµñ
            // ÂéüÈÄªËæë‰æùËµñTimelineStateÂíåPagingStateSuccessÔºåÈúÄË¶ÅSwiftÂéüÁîüÂÆûÁé∞
            Task {
                // ÊöÇÊó∂‰ΩøÁî®ÁÆÄÂåñÁöÑÈ¢ÑÂä†ËΩΩÈÄªËæë
                if index > 0 && index % 10 == 0 {
                    FlareLog.debug("TimelineItemRowView Simplified preload trigger at index: \(index)")
                }
            }
        }
    }
    
    // MARK: - ‰ªéTimelineStatusViewÂ§çÂà∂ÁöÑÊñπÊ≥ï

    private func handleStatusTap() {
        // üî• ÂÆûÁé∞Êé®ÊñáÁÇπÂáªË∑≥ËΩ¨Âà∞ËØ¶ÊÉÖÈ°µÈù¢
        let accountType = UserManager.shared.getCurrentAccountType() ?? AccountTypeGuest()

        // ÊûÑÈÄ†MicroBlogKey - ÈúÄË¶Å‰ªéitem.idÂíåplatformTypeÊûÑÈÄ†
        let statusKey = createMicroBlogKey(from: item)

        FlareLog.debug("TimelineStatusView Navigate to status detail: \(item.id)")
        router.navigate(to: .statusDetail(
            accountType: accountType,
            statusKey: statusKey
        ))
    }

    private func handlePodcastCardTap(card: Card) {
        // üî• ÂÆûÁé∞Êí≠ÂÆ¢Âç°ÁâáÁÇπÂáªÂ§ÑÁêÜ
        if let route = AppDeepLinkHelper().parse(url: card.url) as? AppleRoute.Podcast {
            FlareLog.debug("TimelineStatusViewV2 Podcast Card Tapped, navigating to: podcastSheet(accountType: \(route.accountType), podcastId: \(route.id))")
            router.navigate(to: .podcastSheet(accountType: route.accountType, podcastId: route.id))
        } else {
            let parsedRoute = AppDeepLinkHelper().parse(url: card.url)
            FlareLog.error("TimelineStatusViewV2 Error: Could not parse Podcast URL from card: \(card.url). Parsed type: \(type(of: parsedRoute)) Optional value: \(String(describing: parsedRoute))")
            // ÈôçÁ∫ßÂ§ÑÁêÜÔºö‰ΩøÁî®Á≥ªÁªüURLÊâìÂºÄ
            if let url = URL(string: card.url) {
                openURL(url)
            }
        }
    }

    // MARK: - ËæÖÂä©ÊñπÊ≥ï

    /// ‰ªéTimelineItemÂàõÂª∫MicroBlogKey
    private func createMicroBlogKey(from item: TimelineItem) -> MicroBlogKey {
        // ‰ªéplatformTypeÊé®Êñ≠host
        let host = extractHostFromPlatformType(item.platformType)
        return MicroBlogKey(id: item.id, host: host)
    }

    /// ‰ªéplatformTypeÊèêÂèñhost‰ø°ÊÅØ
    private func extractHostFromPlatformType(_ platformType: String) -> String {
        // Ê†πÊçÆplatformTypeÊé®Êñ≠ÈªòËÆ§host
        switch platformType.lowercased() {
        case "mastodon":
            return "mastodon.social" // ÈªòËÆ§MastodonÂÆû‰æã
        case "bluesky":
            return "bsky.app"
        case "misskey":
            return "misskey.io"
        case "xqt", "twitter":
            return "x.com"
        case "vvo":
            return "weibo.com"
        default:
            return "unknown.host"
        }
    }

    private func handleTimelineAction(_ actionType: TimelineActionType, item: TimelineItem, at index: Int) {
        FlareLog.debug("TimelineView_v2 Handling action \(actionType) for item: \(item.id) at index: \(index)")
        FlareLog.debug("TimelineView_v2 Received updated item state:")
        FlareLog.debug("   - ID: \(item.id)")
        FlareLog.debug("   - Like count: \(item.likeCount)")
        FlareLog.debug("   - Is liked: \(item.isLiked)")
        FlareLog.debug("   - Retweet count: \(item.retweetCount)")
        FlareLog.debug("   - Is retweeted: \(item.isRetweeted)")
        FlareLog.debug("   - Bookmark count: \(item.bookmarkCount)")
        FlareLog.debug("   - Is bookmarked: \(item.isBookmarked)")

        Task {
            FlareLog.debug("TimelineView_v2 Updating local state for index: \(index)")
            FlareLog.debug("TimelineView_v2 Local state update logged for index: \(index)")
        }
    }
}

