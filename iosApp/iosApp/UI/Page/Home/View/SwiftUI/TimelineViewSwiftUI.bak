import shared
import SwiftUI

//性能问题，乱跳，isPreloading 有加载 ，改天改
struct TimelineViewSwiftUI: View {
    let tab: FLTabItem
    @ObservedObject var store: AppBarTabSettingStore
    @State private var presenter: TimelinePresenter?
    @Binding var scrollPositionID: String?

    // 添加预加载控制
    @State private var isPreloading = false
    @State private var lastPreloadIndex = -1

    // 添加可见性跟踪
    @State private var visibleItems: Set<Int> = []

    // var body: some View {
    //     ScrollView {
    //         LazyVStack(spacing: 0) {
    //             if let presenter {
    //                 ObservePresenter(presenter: presenter) { state in
    //                     if let timelineState = state as? TimelineState,
    //                        case let .success(success) = onEnum(of: timelineState.listState)
    //                     {
    //                         ForEach(0 ..< success.itemCount, id: \.self) { index in

    //                             if let status = success.peek(index: index) {
    //                                 let statusID = status.itemKey
    //                                 StatusItemView(data: status, detailKey: nil)
    //                                     .padding(.vertical, 8)
    //                                     .padding(.horizontal, 16)
    //                                     .id("StatusItemView_\(statusID)")
    //                                     .onAppear {
    //                                         if index > success.itemCount - 4 {
    //                                             success.get(index: index)
    //                                         }
    //                                     }
    //                                     .background(
    //                                         GeometryReader { _ in
    //                                             Color.clear
    //                                                 .onAppear {
    //                                                     if index == 0 {
    //                                                         scrollPositionID = statusID
    //                                                     }
    //                                                 }
    //                                         }
    //                                     )
    //                             } else {
    //                                 StatusPlaceHolder()
    //                                     .onAppear {
    //                                         success.get(index: index)
    //                                     }
    //                                     .padding(.vertical, 8)
    //                                     .padding(.horizontal, 16)
    //                             }

    //                             if index < success.itemCount - 1 {
    //                                 Divider()
    //                                     .padding(.horizontal, 16)
    //                             }
    //                         }
    //                     } else if let timelineState = state as? TimelineState {
    //                         StatusTimelineComponent(
    //                             data: timelineState.listState,
    //                             detailKey: nil
    //                         )
    //                         .padding(.horizontal, 16)
    //                     }
    //                 }
    //             }
    //         }
    //     }
    //     // 添加两个手势：菜单手势和标签导航手势
    //     .scrollPosition(id: $scrollPositionID)
    //     .refreshable {
    //         if let presenter,
    //            let timelineState = presenter.models.value as? TimelineState
    //         {
    //             try? await timelineState.refresh()
    //         }
    //     }
    //     .task {
    //         if presenter == nil {
    //             presenter = store.getOrCreatePresenter(for: tab)
    //         }
    //     }
    // }

    var body: some View {
        ScrollView {
            LazyVStack(spacing: 0) {
                if let presenter {
                    ObservePresenter(presenter: presenter) { state in
                        if let timelineState = state as? TimelineState,
                           case let .success(success) = onEnum(of: timelineState.listState)
                        {
                            ForEach(0 ..< Int(success.itemCount), id: \.self) { index in
                                StatusItemContainer(
                                    index: index,
                                    success: success,
                                    scrollPositionID: $scrollPositionID,
                                    onPreload: { preloadIndex in
                                        handlePreload(at: preloadIndex, success: success)
                                    },
                                    onVisibilityChange: { index, isVisible in
                                        handleVisibilityChange(index: index, isVisible: isVisible)
                                    }
                                )

                                if index < Int(success.itemCount) - 1 {
                                    Divider()
                                        .padding(.horizontal, 16)
                                }
                            }
                        } else if let timelineState = state as? TimelineState {
                            StatusTimelineComponent(
                                data: timelineState.listState,
                                detailKey: nil
                            )
                            .padding(.horizontal, 16)
                        }
                    }
                }
            }
        }
        .scrollPosition(id: $scrollPositionID)
        .refreshable {
            await handleRefresh()
        }
        .task {
            if presenter == nil {
                presenter = store.getOrCreatePresenter(for: tab)
            }
        }
    }

    private func handlePreload(at index: Int, success: PagingStateSuccess<UiTimeline>) {
        // 防止重复预加载
        guard !isPreloading, index > lastPreloadIndex else { return }

        // 智能预加载：当滚动到倒数第5个时开始预加载
        if index > Int(success.itemCount) - 5 {
            isPreloading = true
            lastPreloadIndex = index

            Task {
                success.get(index: Int32(index))
                // 添加延迟，避免过于频繁的请求
                try? await Task.sleep(nanoseconds: 500_000_000) // 0.5秒
                isPreloading = false
            }
        }
    }

    private func handleVisibilityChange(index: Int, isVisible: Bool) {
        if isVisible {
            visibleItems.insert(index)
        } else {
            visibleItems.remove(index)
        }

        // 可以基于可见性进行额外优化，比如暂停不可见项的动画
    }

    private func handleRefresh() async {
        guard let presenter,
              let timelineState = presenter.models.value as? TimelineState else { return }

        do {
            try await timelineState.refresh()
            // 重置预加载状态
            lastPreloadIndex = -1
            isPreloading = false
        } catch {
            // 处理刷新错误
            print("Refresh failed: \(error)")
        }
    }
}

// 状态项容器，负责处理可见性和预加载
struct StatusItemContainer: View {
    let index: Int
    let success: PagingStateSuccess<UiTimeline>
    @Binding var scrollPositionID: String?
    let onPreload: (Int) -> Void
    let onVisibilityChange: (Int, Bool) -> Void

    var body: some View {
        Group {
            if let status = success.peek(index: Int32(index)) {
                let statusID = status.itemKey
                StatusItemView(data: status, detailKey: nil)
                    .padding(.vertical, 8)
                    .padding(.horizontal, 16)
                    .id("StatusItemView_\(statusID)")
                    .onAppear {
                        onPreload(index)
                        onVisibilityChange(index, true)

                        if index == 0 {
                            scrollPositionID = statusID
                        }
                    }
                    .onDisappear {
                        onVisibilityChange(index, false)
                    }
            } else {
                StatusPlaceHolder()
                    .onAppear {
                        success.get(index: Int32(index))
                    }
                    .padding(.vertical, 8)
                    .padding(.horizontal, 16)
            }
        }
    }
}
