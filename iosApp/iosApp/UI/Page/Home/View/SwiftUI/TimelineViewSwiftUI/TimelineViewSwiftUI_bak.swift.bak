import os
import shared
import SwiftUI

private enum ScrollDirection {
    case up
    case down
    case none
}
//old
//struct TimelineViewSwiftUI_Base_Standalone: View {
//    let tab: FLTabItem
//    @ObservedObject var store: AppBarTabSettingStore
//    @State private var presenter: TimelinePresenter?
//    @Binding var scrollPositionID: String?
//    @Binding var scrollToTopTrigger: Bool
//    let isCurrentTab: Bool
//
//    @Binding var showFloatingButton: Bool
//
//    var body: some View {
//        ScrollViewReader { proxy in
//            ScrollView {
//                LazyVStack(spacing: 0) {
//                    ScrollToTopView(tabKey: tab.key)
//                        .id("top")
//                        .background(
//                            GeometryReader { geometry in
//                                Color.clear
//                                    .preference(key: ScrollOffsetPreferenceKey.self,
//                                                value: geometry.frame(in: .global).minY)
//                            }
//                        )
//
//                    if let presenter {
//                        ObservePresenter(presenter: presenter) { state in
//                            if let timelineState = state as? TimelineState,
//                               case let .success(success) = onEnum(of: timelineState.listState)
//                            {
//                                ForEach(0 ..< success.itemCount, id: \.self) { index in
//
//                                    if let status = success.peek(index: index) {
//                                        let statusID = status.itemKey
//                                        StatusItemView(data: status, detailKey: nil)
//                                            .padding(.vertical, 8)
//                                            .padding(.horizontal, 16)
//                                            .id("StatusItemView_\(statusID)")
//                                            .onAppear {
//                                                if index > success.itemCount - 4 {
//                                                    success.get(index: index)
//                                                }
//                                            }
//                                            .background(
//                                                GeometryReader { _ in
//                                                    Color.clear
//                                                        .onAppear {
//                                                            if index == 0 {
//                                                                scrollPositionID = statusID
//                                                            }
//                                                        }
//                                                }
//                                            )
//                                    } else {
//                                        StatusPlaceHolder()
//                                            .onAppear {
//                                                success.get(index: index)
//                                            }
//                                            .padding(.vertical, 8)
//                                            .padding(.horizontal, 16)
//                                    }
//
//                                    if index < success.itemCount - 1 {
//                                        Divider()
//                                            .padding(.horizontal, 16)
//                                    }
//                                }
//                            } else if let timelineState = state as? TimelineState {
//                                StatusTimelineComponent(
//                                    data: timelineState.listState,
//                                    detailKey: nil
//                                )
//                                .padding(.horizontal, 16)
//                            }
//                        }
//                    }
//                }
//            }
//            .onChange(of: scrollToTopTrigger) { oldValue, newValue in
//                print("[TimelineView] ScrollToTop trigger changed for tab: \(tab.key), isCurrentTab: \(isCurrentTab), oldValue: \(oldValue), newValue: \(newValue)")
//
//                guard isCurrentTab else {
//                    print("[TimelineView] Ignoring scroll trigger for inactive tab: \(tab.key)")
//                    return
//                }
//
//                print("[TimelineView] Starting scroll to top for tab: \(tab.key), anchor ID: \(ScrollToTopView.Constants.scrollToTop)")
//
//                // 改进的滚动逻辑：使用多重保障机制
//                // 方法1：直接滚动到锚点
//                withAnimation(.easeInOut(duration: 0.5)) {
//                    proxy.scrollTo(ScrollToTopView.Constants.scrollToTop, anchor: .top)
//                }
//
//                // 方法2：备用方案 - 如果锚点不可用，滚动到第一个状态项
//                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
//                    // 检查是否成功滚动到顶部，如果没有，使用备用方案
//                    if let firstStatusID = scrollPositionID {
//                        withAnimation(.easeInOut(duration: 0.3)) {
//                            proxy.scrollTo("StatusItemView_\(firstStatusID)", anchor: .top)
//                        }
//                        print("[TimelineView] Used fallback scroll to first status: \(firstStatusID)")
//                    }
//                }
//
//                DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
//                    print("[TimelineView] Scroll animation completed for tab: \(tab.key)")
//                }
//            }
//        }
//
//        .scrollPosition(id: $scrollPositionID)
//        .refreshable {
//            if let presenter,
//               let timelineState = presenter.models.value as? TimelineState
//            {
//                try? await timelineState.refresh()
//            }
//        }
//        .task {
//            if presenter == nil {
//                presenter = store.getOrCreatePresenter(for: tab)
//            }
//        }
//        .coordinateSpace(name: "scroll")
//        .onPreferenceChange(ScrollOffsetPreferenceKey.self) { offset in
//            handleScrollOffsetChange(offset)
//        }
//    }
//
//    private func handleScrollOffsetChange(_ offset: CGFloat) {
//        guard isCurrentTab else {
//            return
//        }
//
//        handleFloatingButtonVisibility(offset)
//    }
//
//    private func handleFloatingButtonVisibility(_: CGFloat) {
//        if !showFloatingButton {
//            showFloatingButton = true
//        }
//    }
//}
