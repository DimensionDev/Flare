import Awesome
import Generated
import os.log
import shared
import SwiftUI

struct NewHomeContent: View {
    @Environment(\.horizontalSizeClass) var horizontalSizeClass
    @State private var selectedTab: FlareHomeTabs = .timeline
    let accountType: AccountType
    @State var showSettings = false
    @State var showLogin = false
    @State private var selectedHomeTab = 0
    @StateObject private var appState = FlareAppState()

    // 使用来自FlareMenuContainer的router
    @EnvironmentObject private var router: FlareRouter

    // Namespace for smooth animation between tabs
    @Namespace private var tabBarNamespace

    // State for Menu View user data
    @State private var currentUser: UiUserV2? = nil

    // Determine visible tabs based on login state
    private var visibleTabs: [FlareHomeTabs] {
        var tabs: [FlareHomeTabs] = [.menu, .timeline] // Menu and Timeline always visible
        if !(accountType is AccountTypeGuest) {
            tabs.append(.notification)
        }
        // Compose is handled separately
        tabs.append(.discover)
        if !(accountType is AccountTypeGuest) {
            tabs.append(.profile)
        }
        return tabs
    }

    var body: some View {
        let routerId = ObjectIdentifier(router)
        os_log("[HomeContent] Using router: %{public}@, selectedTab: %{public}@",
               log: .default, type: .debug,
               String(describing: routerId),
               String(describing: selectedTab))

        return FlareTheme {
            VStack(spacing: 0) {
                // MARK: - Main Content Area
                currentContentView()
                    .environmentObject(appState) // Pass state down if needed by screens
                    .frame(maxWidth: .infinity, maxHeight: .infinity) // Occupy available space

                // Divider (optional)
                // Divider().background(Color(.separator))

                // MARK: - Custom Tab Bar Area
                customTabBar()
                    .padding(.bottom, SafeAreaInsetsKey.defaultValue.bottom > 0 ? 0 : 10) // Add padding only if no safe area inset
            }
            .background(Color(.systemBackground).edgesIgnoringSafeArea(.bottom)) // Extend background color
            .onAppear {
                checkAndUpdateUserState() // Fetch user data for menu
            }
        }
        .sheet(isPresented: $showLogin) {
            ServiceSelectScreen(toHome: {
                showLogin = false
            })
            #if os(macOS)
            .frame(minWidth: 600, minHeight: 400)
            #endif
        }
        .sheet(isPresented: $showSettings) {
            SettingsUIScreen()
        }
    }

    // MARK: - Content View Switching Logic
    @ViewBuilder
    private func currentContentView() -> some View {
        // Use a ZStack to keep content alive during tab switches, improving performance.
        // If state preservation isn't critical or causes issues, a simple switch is fine.
        ZStack {
             ForEach(FlareHomeTabs.allCases, id: \.self) { tab in
                 if tabShouldBeRendered(tab) {
                     viewForTab(tab)
                         .opacity(selectedTab == tab ? 1 : 0) // Show only the selected tab's content
                         .allowsHitTesting(selectedTab == tab) // Allow interaction only for the selected tab
                 }
             }
        }
    }
    
    // Helper to determine if a tab should be rendered based on login state
    private func tabShouldBeRendered(_ tab: FlareHomeTabs) -> Bool {
        switch tab {
        case .notification, .compose, .profile:
            return !(accountType is AccountTypeGuest)
        default:
            return true
        }
    }

    // Helper function to get the view for a specific tab
    @ViewBuilder
    private func viewForTab(_ tab: FlareHomeTabs) -> some View {
        switch tab {
        case .menu:
            FLNewMenuView(accountType: accountType, user: currentUser)
                .environmentObject(router) // Menu needs router
        case .timeline:
            HomeTabScreenSwiftUI(accountType: accountType)
        case .notification:
             if !(accountType is AccountTypeGuest) { // Double check, though filtered by ZStack loop
                NotificationTabScreen(accountType: accountType)
            } else { EmptyView() }
        case .compose:
            // Compose is action-only, content view not needed here
            EmptyView()
        case .discover:
            DiscoverTabScreen(
                accountType: accountType,
                onUserClicked: { user in
                    router.navigate(to: .profile(accountType: accountType, userKey: user.key))
                }
            )
        case .profile:
             if !(accountType is AccountTypeGuest) { // Double check
                ProfileTabScreen(
                    accountType: accountType,
                    userKey: nil, // Current user's profile
                    toProfileMedia: { _ in
                        print("Media tab integrated")
                    }
                )
            } else { EmptyView() }
        }
    }


    // MARK: - Custom Tab Bar View
    @ViewBuilder
    private func customTabBar() -> some View {
        HStack { // Outer HStack for centering
            Spacer()
            HStack(spacing: 0) { // Inner HStack for items and background capsule
                ForEach(visibleTabs, id: \.self) { tab in
                    tabBarItem(for: tab)
                         .padding(.horizontal, calculateHorizontalPadding(for: visibleTabs.count)) // Dynamic padding
                }
                // Add Compose button separately if logged in
                if !(accountType is AccountTypeGuest) {
                    composeButton()
                         .padding(.horizontal, calculateHorizontalPadding(for: visibleTabs.count + 1)) // Include compose in count for padding
                }
            }
            .padding(.vertical, 8) // Vertical padding for the capsule
            .background(
                Capsule()
                    .fill(Color(.secondarySystemBackground)) // Background color of the tab bar capsule
                    // .shadow(color: .black.opacity(0.1), radius: 3, y: 2) // Optional shadow
            )
            Spacer()
        }
        .frame(height: 50) // Fixed height for the tab bar area
    }
    
    // Calculate dynamic horizontal padding based on item count
    private func calculateHorizontalPadding(for itemCount: Int) -> CGFloat {
        // Adjust these values based on desired spacing
        switch itemCount {
        case 3: return 20
        case 4: return 15
        case 5: return 12
        case 6: return 10 // Includes compose button
        default: return 10
        }
    }


    // MARK: - Individual Tab Bar Item
    @ViewBuilder
    private func tabBarItem(for tab: FlareHomeTabs) -> some View {
        Button {
            withAnimation(.easeInOut(duration: 0.2)) { // Animation for selection change
                selectedTab = tab
            }
            os_log("[HomeContent] Tab selected: %{public}@", log: .default, type: .debug, String(describing: tab))
        } label: {
            VStack(spacing: 2) {
                Image(uiImage: icon(for: tab, isActive: selectedTab == tab))
                    .renderingMode(.template)
                    .foregroundColor(selectedTab == tab ? Color.accentColor : Color(.secondaryLabel))
                    .frame(width: 24, height: 24) // Ensure consistent icon size
                    .background(
                        // Capsule indicator with matchedGeometryEffect
                        ZStack { // Use ZStack to layer the capsule correctly
                            if selectedTab == tab {
                                Capsule()
                                    .fill(Color.accentColor.opacity(0.15)) // Background color for selected item
                                    .matchedGeometryEffect(id: "selectedTabIndicator", in: tabBarNamespace) // Animation ID
                                    .frame(width: 55, height: 32) // Adjust size of the capsule indicator
                            }
                        }
                    )
            }
        }
        .frame(maxWidth: .infinity) // Allow button to take up space within the HStack
    }

    // MARK: - Compose Button
    @ViewBuilder
    private func composeButton() -> some View {
        Button {
            // Trigger compose action
            ComposeManager.shared.showNewCompose(accountType: accountType)
            os_log("[HomeContent] Compose button tapped", log: .default, type: .debug)
        } label: {
             Image(uiImage: Asset.Tab.compose.image) // Use compose asset
                 .renderingMode(.template)
                 .foregroundColor(Color.accentColor) // Or a specific color for compose
                .frame(width: 28, height: 28) // Slightly larger?
                 .padding(6) // Padding around the compose icon
                 // .background(Circle().fill(Color.accentColor.opacity(0.1))) // Optional background highlight
        }
        .frame(maxWidth: .infinity)
    }


    // MARK: - Icon Logic
    private func icon(for tab: FlareHomeTabs, isActive: Bool) -> UIImage {
        switch tab {
        case .menu:
            // Assuming you have a menu icon in Assets, otherwise use system icon
            return isActive ? (Asset.Image.menu.image) : (Asset.Image.menu.image) // Replace with active/inactive if available
        case .timeline:
            return isActive ? Asset.Tab.feedActivie.image : Asset.Tab.feedInactive.image
        case .notification:
            return isActive ? Asset.Tab.trendingActive.image : Asset.Tab.trendingInactive.image
        case .discover:
            return isActive ? Asset.Tab.searchActive.image : Asset.Tab.searchInactive.image
        case .profile:
            return isActive ? Asset.Tab.profileActive.image : Asset.Tab.profileInactive.image
        case .compose:
            return Asset.Tab.compose.image // Compose doesn't have active/inactive state here
        }
    }

    // MARK: - Fetch User Data
    private func checkAndUpdateUserState() {
        if let user = UserManager.shared.getCurrentUser() {
            currentUser = user
        } else {
            currentUser = nil
        }
        os_log("[HomeContent] Updated user state for menu", log: .default, type: .debug)
    }
}

// Add SafeAreaInsetsKey helper if not already present in the project
struct SafeAreaInsetsKey: EnvironmentKey {
    static var defaultValue: EdgeInsets {
        (UIApplication.shared.connectedScenes.first as? UIWindowScene)?
            .windows.first?.safeAreaInsets.toSwiftUIInsets() ?? EdgeInsets()
    }
}

extension EnvironmentValues {
    var safeAreaInsets: EdgeInsets {
        self[SafeAreaInsetsKey.self]
    }
}

extension UIEdgeInsets {
    func toSwiftUIInsets() -> EdgeInsets {
        EdgeInsets(top: top, leading: left, bottom: bottom, trailing: right)
    }
}

// Extend FlareHomeTabs to include .menu and conform to CaseIterable if needed for ZStack loop
extension FlareHomeTabs: CaseIterable {
    public static var allCases: [FlareHomeTabs] {
         // Define the order explicitly for ZStack rendering
         return [.menu, .timeline, .notification, .compose, .discover, .profile]
     }
}
