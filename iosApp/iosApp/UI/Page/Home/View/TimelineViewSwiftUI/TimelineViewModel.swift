import Combine
import shared
import SwiftUI

@MainActor
@Observable
class TimelineViewModel {
    private(set) var timelineState: FlareTimelineState = .loading
    private(set) var showErrorAlert = false
    private(set) var currentError: FlareError?

    private(set) var presenter: TimelinePresenter?
    private let stateConverter = PagingStateConverter()
    private var refreshDebounceTimer: Timer?
    private var cancellables = Set<AnyCancellable>()

    private var dataSourceTask: Task<Void, Never>?

    private(set) var isLoadingMore: Bool = false

    var items: [TimelineItem] {
        if case let .loaded(items, _) = timelineState {
            return items
        }
        return []
    }

    var hasMore: Bool {
        if case let .loaded(_, hasMore) = timelineState {
            return hasMore
        }
        return false
    }

    // üî• ÁßªÈô§ÔºöisRefreshingÂ±ûÊÄß‰∏çÂÜçÈúÄË¶Å
    // var isRefreshing: Bool {
    //     return false
    // }

    func setupDataSource(for tab: FLTabItem, using store: AppBarTabSettingStore) async {
        dataSourceTask?.cancel()

        FlareLog.debug("Timeline Setting up data source with cache for tab: \(tab.key)")

        guard let cachedPresenter = store.getOrCreatePresenter(for: tab) else {
            FlareLog.error("Timeline Failed to get cached presenter for tab: \(tab.key)")
            currentError = FlareError.data(.parsing)
            showErrorAlert = true
            return
        }

        if presenter === cachedPresenter {
            FlareLog.debug("Timeline Using existing presenter for tab: \(tab.key)")
        } else {
            FlareLog.debug("Timeline Setting new cached presenter for tab: \(tab.key)")
            presenter = cachedPresenter
        }

        dataSourceTask = Task {
            for await state in cachedPresenter.models {
                guard !Task.isCancelled else {
                    FlareLog.debug("[Timeline ViewModel] Task cancelled, stopping data processing")
                    break
                }

                // üî• Ê∑ªÂä†Êó•ÂøóÔºöÁä∂ÊÄÅÊõ¥Êñ∞ËØ¶ÊÉÖ
                FlareLog.debug("[Timeline ViewModel] Êî∂Âà∞KMPÁä∂ÊÄÅÊõ¥Êñ∞ - Á±ªÂûã: \(type(of: state.listState))")
                if let successState = state.listState as? PagingStateSuccess<UiTimeline> {
                    FlareLog.debug("[Timeline ViewModel] KMPÁä∂ÊÄÅËØ¶ÊÉÖ - isRefreshing: \(successState.isRefreshing), itemCount: \(successState.itemCount)")
                }
                FlareLog.debug("[Timeline ViewModel] Êî∂Âà∞KMPÁä∂ÊÄÅÊõ¥Êñ∞: \(type(of: state.listState))")

                let flareState = await Task.detached(priority: .userInitiated) { [stateConverter] in
                    return stateConverter.convert(state.listState)
                }.value

                // üî• Ê∑ªÂä†Êó•ÂøóÔºöËΩ¨Êç¢ÁªìÊûú
                FlareLog.debug("[Timeline ViewModel] Áä∂ÊÄÅËΩ¨Êç¢ÂÆåÊàê - ËΩ¨Êç¢ÂâçÁ±ªÂûã: \(type(of: state.listState)), ËΩ¨Êç¢ÂêéÁ±ªÂûã: \(type(of: flareState))")
                FlareLog.debug("[Timeline ViewModel] Áä∂ÊÄÅËΩ¨Êç¢ÂÆåÊàê: \(type(of: flareState))")

                await MainActor.run {
                    let oldItemsCount = self.items.count
                    self.timelineState = flareState
                    let newItemsCount = self.items.count
                    // üî• Ê∑ªÂä†Êó•ÂøóÔºöUIÁä∂ÊÄÅÊõ¥Êñ∞
                    FlareLog.debug("[Timeline ViewModel] UIÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞ - itemsÊï∞ÈáèÂèòÂåñ: \(oldItemsCount) -> \(newItemsCount), hasMore: \(self.hasMore)")
                    FlareLog.debug("[Timeline ViewModel] UIÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞: itemsÊï∞Èáè=\(self.items.count), hasMore=\(self.hasMore)")
                }
            }
        }
    }

    func handleRefresh() async {
        // üî• Ê∑ªÂä†Êó•ÂøóÔºörefreshÊìç‰ΩúÂºÄÂßã
        FlareLog.debug("[Timeline ViewModel] handleRefreshÂºÄÂßã - isLoadingMore: \(isLoadingMore)")
        FlareLog.debug("Timeline Handling refresh")

        // üî• Êñ∞Â¢ûÔºöÂà∑Êñ∞ÂâçÈáçÁΩÆÁä∂ÊÄÅËΩ¨Êç¢Âô®
        stateConverter.reset()
        FlareLog.debug("[Timeline ViewModel] Âà∑Êñ∞ÂâçÂ∑≤ÈáçÁΩÆÁä∂ÊÄÅËΩ¨Êç¢Âô®")

        guard let presenter else {
            FlareLog.warning("[Timeline ViewModel] handleRefreshÂ§±Ë¥• - presenter‰∏∫Á©∫")
            FlareLog.warning("Timeline No presenter available for refresh")
            return
        }

        do {
            let refreshResult = try await Task.detached(priority: .userInitiated) { [presenter] in
                let timelineState = presenter.models.value
                try await timelineState.refresh()
                return true
            }.value

            if refreshResult {
                FlareLog.debug("[Timeline ViewModel] handleRefreshÂÆåÊàê")
                FlareLog.debug("Timeline Refresh completed")
            }
        } catch {
            FlareLog.error("[Timeline ViewModel] handleRefreshÂ§±Ë¥•: \(error)")
            FlareLog.error("Timeline Refresh failed: \(error)")
            let flareError = await Task.detached(priority: .utility) {
                FlareError.from(error)
            }.value

            currentError = flareError
            showErrorAlert = true
        }
    }

    func getFirstItemID() -> String? {
        guard let firstID = items.first?.id else {
            FlareLog.debug("Timeline ScrollToTop skipped: no items")
            return nil
        }

        FlareLog.debug("Timeline ScrollToTop available: firstID=\(firstID)")
        return firstID
    }

    func handleError(_ error: FlareError) {
        currentError = error
        showErrorAlert = true
    }

    func handleScrollOffsetChange(_ offsetY: CGFloat, showFloatingButton: Binding<Bool>) {
        let shouldShow = offsetY > 50

        if showFloatingButton.wrappedValue != shouldShow {
            showFloatingButton.wrappedValue = shouldShow
        }
    }

    func handleLoadMore() async {
        // üî• Ê∑ªÂä†Êó•ÂøóÔºöloadMoreÊìç‰ΩúÁä∂ÊÄÅÊ£ÄÊü•
        FlareLog.debug("[Timeline ViewModel] handleLoadMoreÂºÄÂßã - isLoadingMore: \(isLoadingMore), presenterÂ≠òÂú®: \(presenter != nil)")

        guard let presenter else {
            FlareLog.warning("[Timeline ViewModel] handleLoadMoreÂ§±Ë¥• - presenter‰∏∫Á©∫")
            FlareLog.warning("[Timeline ViewModel] presenter‰∏∫Á©∫ÔºåÊó†Ê≥ïÂä†ËΩΩÊõ¥Â§ö")
            return
        }

        guard !isLoadingMore else {
            FlareLog.debug("[Timeline ViewModel] handleLoadMoreË∑≥Ëøá - Ê≠£Âú®Âä†ËΩΩ‰∏≠")
            FlareLog.debug("[Timeline ViewModel] Ê≠£Âú®Âä†ËΩΩ‰∏≠ÔºåË∑≥ËøáÈáçÂ§çË∞ÉÁî®")
            return
        }

        isLoadingMore = true
        // üî• Ê∑ªÂä†Êó•ÂøóÔºöloadMoreÁä∂ÊÄÅÂèòÊõ¥
        FlareLog.debug("[Timeline ViewModel] handleLoadMoreÁä∂ÊÄÅÊõ¥Êñ∞ - isLoadingMoreËÆæ‰∏∫true")
        defer {
            isLoadingMore = false
            FlareLog.debug("[Timeline ViewModel] handleLoadMoreÁä∂ÊÄÅÊÅ¢Â§ç - isLoadingMoreËÆæ‰∏∫false")
        }

        do {
            try await presenter.models.value.loadMore()
            FlareLog.debug("[Timeline ViewModel] handleLoadMoreÂÆåÊàê")
            FlareLog.debug("[Timeline ViewModel] LoadMore completed successfully")
        } catch {
            FlareLog.error("[Timeline ViewModel] handleLoadMoreÂ§±Ë¥•: \(error)")
            FlareLog.error("[Timeline ViewModel] LoadMore failed: \(error)")
        }
    }
}

struct TimelineLoadingView: View {
    var body: some View {
        VStack(spacing: 16) {
            ProgressView()
                .scaleEffect(1.2)
            Text("Loading Timeline...")
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity, minHeight: 200)
    }
}

func createSampleTimelineItem() -> TimelineItem {
    let sampleUser = User(
        key: "sample@mastodon.social",
        name: RichText(raw: "Sample User Name"),
        handle: "@sampleuser",
        avatar: "https://example.com/avatar.jpg",
        banner: "https://example.com/banner.jpg",
        description: RichText(raw: "Sample user description")
    )

    return TimelineItem(
        id: "sample-timeline-item-\(UUID().uuidString)",
        content: RichText(raw: "This is a sample timeline content for skeleton loading. It shows how the timeline item will look when loaded."),
        user: sampleUser,
        timestamp: Date(),
        images: [],
        url: "https://example.com/status",
        platformType: "Mastodon",
        aboveTextContent: nil,
        contentWarning: nil,
        card: nil,
        quote: [],
        bottomContent: nil,
        topEndContent: nil,
        poll: nil,
        topMessage: nil,
        sensitive: false,
        visibility: "public",
        language: "en",
        actions: []
    )
}

struct TimelineEmptyView: View {
    var body: some View {
        VStack(spacing: 16) {
            Image(systemName: "tray")
                .font(.largeTitle)
                .foregroundColor(.secondary)

            Text("No Timeline Items")
                .font(.headline)

            Text("There are no items to display in this timeline.")
                .font(.body)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity, minHeight: 200)
        .padding()
    }
}
