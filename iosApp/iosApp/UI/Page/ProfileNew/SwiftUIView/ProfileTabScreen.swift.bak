import AVKit
import JXPhotoBrowser
import Kingfisher
import MarkdownUI
import OrderedCollections
import shared
import SwiftUI

struct ProfileTabScreen: View {
    let toProfileMedia: (MicroBlogKey) -> Void
    let accountType: AccountType
    let userKey: MicroBlogKey?

    @State private var symbolToggle: Bool = false
    @State private var presenter: ProfileNewPresenter
    @State private var mediaPresenter: ProfileMediaPresenter

    @StateObject private var tabStore: ProfileTabSettingStore

    @Environment(FlareTheme.self) private var theme

    init(accountType: AccountType, userKey: MicroBlogKey?, toProfileMedia: @escaping (MicroBlogKey) -> Void) {
        self.toProfileMedia = toProfileMedia
        self.accountType = accountType
        self.userKey = userKey

//        let host = UserManager.shared.getCurrentUser()?.key.host ?? ""
//        let userName = UserManager.shared.getCurrentUser()?.name.raw ?? ""
        
        _presenter = .init(initialValue: ProfileNewPresenter(accountType: accountType, userKey: userKey))
        _mediaPresenter = .init(initialValue: ProfileMediaPresenter(accountType: accountType, userKey: userKey))
        
        // 初始化 tabStore
        let tabStore = ProfileTabSettingStore(userKey: userKey)
        _tabStore = StateObject(wrappedValue: tabStore)
    }

    var body: some View {
        ObservePresenter(presenter: presenter) { state in
            ZStack {
                switch onEnum(of: state.userState) {
                case .error:
                    Text("error")
                case .loading:
                     
                        CommonProfileHeader(
                            userInfo: ProfileUserInfo(
                                profile: createSampleUser(),
                                relation: nil,
                                isMe: false,
                                followCount: "0",
                                fansCount: "0",
                                fields: [:],
                                canSendMessage: false
                            ),
                            state: nil,
                            onFollowClick: { _ in }
                        )
                        .redacted(reason: .placeholder)
                        .listRowSeparator(.hidden)
                        .listRowInsets(EdgeInsets())
                  
                case let .success(data):

                    let loadedUserInfo = ProfileUserInfo.from(state: state as! ProfileNewState)

                    if loadedUserInfo != nil {
                        HeaderPageScrollView(displaysSymbols: symbolToggle) {
                            CommonProfileHeader(
                                userInfo: loadedUserInfo!,
                                state: state,
                                onFollowClick: { _ in }
                            )
                        } labels: {
                            getTitleFLTabItem(tab: tabStore.availableTabs[0])
                            getTitleFLTabItem(tab: tabStore.availableTabs[1])
                            getTitleFLTabItem(tab: tabStore.availableTabs[2])
                        } pages: {
                            DummyView(tab: tabStore.availableTabs[0])
                            DummyView(tab: tabStore.availableTabs[1])
                            DummyView(tab: tabStore.availableTabs[2])
                            
                           
//                            DummyView2(.red, count: 50)
//                            DummyView2(.yellow, count: 10)
//                            DummyView2(.indigo, count: 5)

                            
                        } onRefresh: {
                            print("Refresh Data")
                        }
                    } else {
                        ProgressView()
                            .frame(maxWidth: .infinity, maxHeight: .infinity)
                    }
                }
            }.ignoresSafeArea(edges: .top)
        }
    }

    private func getTitleFLTabItem(tab: FLTabItem) -> PageLabel {
        switch tab.metaData.title {
        case let .text(title):
            PageLabel(title: title, symbolImage: "square.grid.3x3.fill")
        case let .localized(key):
            PageLabel(title: NSLocalizedString(key, comment: ""), symbolImage: "square.grid.3x3.fill")
        }
    }
    
    @ViewBuilder
    private func DummyView2(_ color: Color, count: Int) -> some View {
        LazyVGrid(columns: Array(repeating: GridItem(), count: 3)) {
            ForEach(0..<count, id: \.self) { index in
                RoundedRectangle(cornerRadius: 12)
                    .fill(color.gradient)
                    .frame(height: 160)
            }
        }
        .padding(15)
    }

    @ViewBuilder
    private func DummyView(tab: FLTabItem) -> some View {
        if tab is FLProfileMediaTabItem {
            ProfileMediaListScreen(accountType: accountType, userKey: userKey, currentMediaPresenter: mediaPresenter)
        } else {
            if let presenterx = tabStore.getOrCreatePresenter(for: tab) {
               
                ProfileTimelineView(
                    presenter: presenterx  
                )
            } else {
                ProgressView()
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
        }
    }
}
