/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package dev.dimension.flare.data.network.xqt.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 *
 *
 * Values: timelineTweet,timelineTimelineItem,timelineUser,timelineTimelineCursor,tweetWithVisibilityResults,timelineTimelineModule,tweetTombstone,timelinePrompt,timelineMessagePrompt,timelineCommunity,tweetUnavailable,tweet,user,userUnavailable
 */
@Serializable
internal enum class TypeName(val value: kotlin.String) {
    @SerialName(value = "TimelineTweet")
    timelineTweet("TimelineTweet"),

    @SerialName(value = "TimelineTimelineItem")
    timelineTimelineItem("TimelineTimelineItem"),

    @SerialName(value = "TimelineUser")
    timelineUser("TimelineUser"),

    @SerialName(value = "TimelineTimelineCursor")
    timelineTimelineCursor("TimelineTimelineCursor"),

    @SerialName(value = "TweetWithVisibilityResults")
    tweetWithVisibilityResults("TweetWithVisibilityResults"),

    @SerialName(value = "TimelineTimelineModule")
    timelineTimelineModule("TimelineTimelineModule"),

    @SerialName(value = "TweetTombstone")
    tweetTombstone("TweetTombstone"),

    @SerialName(value = "TimelinePrompt")
    timelinePrompt("TimelinePrompt"),

    @SerialName(value = "TimelineMessagePrompt")
    timelineMessagePrompt("TimelineMessagePrompt"),

    @SerialName(value = "TimelineCommunity")
    timelineCommunity("TimelineCommunity"),

    @SerialName(value = "TweetUnavailable")
    tweetUnavailable("TweetUnavailable"),

    @SerialName(value = "Tweet")
    tweet("Tweet"),

    @SerialName(value = "User")
    user("User"),

    @SerialName(value = "UserUnavailable")
    userUnavailable("UserUnavailable"),
    ;

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TypeName) "$data" else null

        /**
         * Returns a valid [TypeName] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TypeName? =
            data?.let {
                val normalizedData = "$it".lowercase()
                values().firstOrNull { value ->
                    it == value || normalizedData == "$value".lowercase()
                }
            }
    }
}
