import dev.dimension.flare.model.MicroBlogKey;

CREATE TABLE IF NOT EXISTS DbPagingTimeline (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_key TEXT AS MicroBlogKey NOT NULL,
    paging_key TEXT NOT NULL,
    status_key TEXT AS MicroBlogKey NOT NULL,
    sort_id INTEGER NOT NULL,
    UNIQUE (account_key, paging_key, status_key)
);

CREATE VIEW IF NOT EXISTS DbPagingTimelineWithStatusView AS
SELECT
timeline.account_key AS timeline_account_key,
timeline.paging_key AS timeline_paging_key,
timeline.status_key AS timeline_status_key,
timeline.sort_id AS timeline_sort_id,
status.platform_type AS status_platform_type,
status.content AS status_content,
user.user_key AS user_user_key,
user.name AS user_name,
user.handle AS user_handle,
user.host AS user_host,
user.content AS user_content
FROM DbPagingTimeline AS timeline
JOIN DbStatus status ON timeline.status_key = status.status_key AND timeline.account_key = status.account_key
LEFT JOIN DbUser user ON status.user_key = user.user_key;

insert:
INSERT OR REPLACE INTO DbPagingTimeline (account_key, paging_key, status_key, sort_id)
    VALUES (:account_key, :paging_key, :status_key, :sort_id);

delete:
DELETE FROM DbPagingTimeline WHERE account_key = :account_key AND paging_key = :paging_key AND status_key = :status_key;

deletePaging:
DELETE FROM DbPagingTimeline WHERE account_key = :account_key AND paging_key = :paging_key;

deleteStatus:
DELETE FROM DbPagingTimeline WHERE account_key = :account_key AND status_key = :status_key;

existsPaging:
SELECT EXISTS(SELECT 1 FROM DbPagingTimeline WHERE account_key = :account_key AND paging_key = :paging_key);

pageCount:
SELECT COUNT(*) FROM DbPagingTimeline WHERE account_key = :account_key AND paging_key = :paging_key;

getPage:
SELECT * FROM DbPagingTimelineWithStatusView WHERE timeline_account_key = :account_key AND timeline_paging_key = :paging_key ORDER BY timeline_sort_id DESC LIMIT :limit OFFSET :offset;
